export default class VNode {
  tag: string | void;
  data: VNodeData | void;
  children: ?Array<VNode>;
  text: string | void;
  elm: Node | void;
  context: Component | void;
  key: string | number | void;
  componentOptions: VNodeComponentOptions | void;
  raw: boolean;
  asyncFactory: Function | void;
  asyncMeta: Object | void;
  fnOptions: ?ComponentOptions;
  fnScopeId: ?string;
  constructor (
    tag?: string,
    children?: ?Array<VNode>,
    componentOptions?: VNodeComponentOptions,
    asyncFactory?: Function
  ) {
    this.tag = tag
    this.data = data
    this.children = children
    this.text = text
    this.elm = elm
    this.ns = undefined
    this.context = context
  }
  get child (): Component | void {
    return this.componentInstance
  }
}
export const createEmptyVNode = (text: string = '') => {
  const node = new VNode()
  node.text = text
  node.isComment = true
  return node
}
export function createTextVNode (val: string | number) {
  return new VNode(undefined, undefined, undefined, String(val))
}
export function cloneVNode (vnode: VNode): VNode {
  const cloned = new VNode(
    vnode.tag,
    vnode.data,
    vnode.children,
  )
  cloned.ns = vnode.ns
  cloned.isStatic = vnode.isStatic
  cloned.key = vnode.key
  return cloned
}
interface Shape {
    name: string;
    width: number;
    height: number;
    color?: string;
}